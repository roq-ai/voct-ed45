generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model company {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  industry    String?       @db.VarChar(255)
  location    String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  form        form[]
  invitation  invitation[]
  team_member team_member[]
}

model feedback {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String
  rating     Int
  form_id    String   @db.Uuid
  user_id    String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  form       form     @relation(fields: [form_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model form {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String     @db.VarChar(255)
  description String?    @db.VarChar(255)
  company_id  String     @db.Uuid
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  feedback    feedback[]
  company     company    @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model invitation {
  id                               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status                           String   @db.VarChar(255)
  inviter_id                       String   @db.Uuid
  invitee_id                       String   @db.Uuid
  company_id                       String   @db.Uuid
  created_at                       DateTime @default(now()) @db.Timestamp(6)
  updated_at                       DateTime @default(now()) @db.Timestamp(6)
  company                          company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_invitation_invitee_idTouser user     @relation("invitation_invitee_idTouser", fields: [invitee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user_invitation_inviter_idTouser user     @relation("invitation_inviter_idTouser", fields: [inviter_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model team_member {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role       String   @db.VarChar(255)
  user_id    String   @db.Uuid
  company_id String   @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  company    company  @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id                                     String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                  String        @unique @db.VarChar(255)
  firstName                              String?       @db.VarChar(255)
  lastName                               String?       @db.VarChar(255)
  roq_user_id                            String        @db.VarChar(255)
  tenant_id                              String        @db.VarChar(255)
  created_at                             DateTime      @default(now()) @db.Timestamp(6)
  updated_at                             DateTime      @default(now()) @db.Timestamp(6)
  company                                company[]
  feedback                               feedback[]
  invitation_invitation_invitee_idTouser invitation[]  @relation("invitation_invitee_idTouser")
  invitation_invitation_inviter_idTouser invitation[]  @relation("invitation_inviter_idTouser")
  team_member                            team_member[]
}
